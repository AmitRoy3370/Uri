import java.util.*;

public class Sort_Sort_And_Sort {
	
	static int m;
	//this class is for comparing value after taking mod
	static class Item implements Comparable<Item> 
	{
		int number;
		
		public Item(int number) 
		{
			this.number = number;
		}

        public int getNumber() {
            return number;
        }

        public void setNumber(int number) {
            this.number = number;
        }

                @Override
		public int compareTo(Item i) 
		{
			//getting mod
			int mod1 = (Math.abs(this.getNumber() ) % m) * (this.getNumber() < 0 ? -1 : 1);
			int mod2 = (Math.abs(i.getNumber() ) % m) * (i.getNumber() < 0 ? -1 : 1);
			//comparing mod and return value 
			if (mod1 != mod2)
				return mod1 - mod2;
			
			int mod21 = Math.abs(this.getNumber() ) % 2;
			int mod22 = Math.abs(i.getNumber() ) % 2;
			if (mod21 == 0 && mod22 == 1)
				return 1;
			if (mod21 == 1 && mod22 == 0)
				return -1;
			if (mod21 == 1 && mod22 == 1 && i.getNumber() <= this.getNumber() )
				return -1;
			if (mod21 == 1 && mod22 == 1 && i.getNumber() > this.getNumber() )
				return 1;
			if (mod21 == 0 && mod22 == 0 && i.getNumber() <= this.getNumber() )
				return 1;
			if (mod21 == 0 && mod22 == 0 && i.getNumber() > this.getNumber() )
				return -1;
			return 1;
		}
	}
	
	public static void main(String[] args) 
	{
		Scanner obj=new Scanner(System.in);
		StringBuilder sb = new StringBuilder();
		while (obj.hasNextInt()&&obj.hasNextInt()) 
		{
			int n=obj.nextInt();
			m=obj.nextInt();
			//adding n and m in string builder 
                        sb.append(n).append(" ").append(m).append("\n");
			if (n == 0 && m == 0)
				break;
			Item[] items = new Item[n];
			//taking input
			for (int i = 0; i < n; ++i) 
			{
				int x = obj.nextInt();
				items[i] = new Item(x);
			}
			//sorting array 
			Arrays.sort(items);
			//adding each num in string builder after new line 
			for (int i = 0; i < n; ++i)
				sb.append(items[i].getNumber()).append("\n");
		}
		System.out.print(sb);
	}
}

/*15 3
1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
3 3
9
12
10
0 0*/
